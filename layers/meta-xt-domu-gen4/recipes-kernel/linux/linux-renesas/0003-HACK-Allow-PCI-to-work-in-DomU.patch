From 34a9938c3778b9efc35b99bee09f42e36c731cc5 Mon Sep 17 00:00:00 2001
Message-Id: <34a9938c3778b9efc35b99bee09f42e36c731cc5.1727704104.git.mykyta_poturai@epam.com>
In-Reply-To: <15f3e7574ff33aa2985c2de933229f509e5893f6.1727704104.git.mykyta_poturai@epam.com>
References: <15f3e7574ff33aa2985c2de933229f509e5893f6.1727704104.git.mykyta_poturai@epam.com>
From: Mykyta Poturai <mykyta_poturai@epam.com>
Date: Mon, 30 Sep 2024 16:48:06 +0300
Subject: [PATCH 3/3] HACK: Allow PCI to work in DomU

DomU doesn't have the access to clock and reset controls so all
necessary clocks and resets are controlled by DomD. Skip initializing
clocks and resets to allow the driver to probe correctly.

Signed-off-by: Mykyta Poturai <mykyta_poturai@epam.com>
---
 .../pci/controller/dwc/pcie-rcar-gen4-host.c   |  6 +++---
 drivers/pci/controller/dwc/pcie-rcar-gen4.c    | 18 +++++++++---------
 2 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/drivers/pci/controller/dwc/pcie-rcar-gen4-host.c b/drivers/pci/controller/dwc/pcie-rcar-gen4-host.c
index ac4250c178d7..56435d75b11b 100644
--- a/drivers/pci/controller/dwc/pcie-rcar-gen4-host.c
+++ b/drivers/pci/controller/dwc/pcie-rcar-gen4-host.c
@@ -20,9 +20,9 @@ static int rcar_gen4_pcie_host_init(struct dw_pcie_rp *pp)
 	int ret;
 	u32 val;
 
-	ret = reset_control_deassert(rcar->rst);
-	if (ret < 0)
-		return ret;
+	// ret = reset_control_deassert(rcar->rst);
+	// if (ret < 0)
+	// 	return ret;
 
 	ret = rcar_gen4_pcie_set_device_type(rcar, true, dw->num_lanes);
 	if (ret < 0)
diff --git a/drivers/pci/controller/dwc/pcie-rcar-gen4.c b/drivers/pci/controller/dwc/pcie-rcar-gen4.c
index 0cadcb1d51d2..c597edbb7e6a 100644
--- a/drivers/pci/controller/dwc/pcie-rcar-gen4.c
+++ b/drivers/pci/controller/dwc/pcie-rcar-gen4.c
@@ -532,15 +532,15 @@ void rcar_gen4_pcie_unprepare(struct rcar_gen4_pcie *rcar)
 
 	if (dw->num_lanes == 4)
 	{
-		for (i = PCIE_LINKUP_WA_CLK_NUM; i-- > 0; )
-			clk_disable_unprepare(rcar->clks[i]);
+		// for (i = PCIE_LINKUP_WA_CLK_NUM; i-- > 0; )
+		// 	clk_disable_unprepare(rcar->clks[i]);
 
 		pm_runtime_put_sync(dev);
 	}
 	else
 	{
-		if (!reset_control_status(rcar->rst))
-			reset_control_assert(rcar->rst);
+		// if (!reset_control_status(rcar->rst))
+		// 	reset_control_assert(rcar->rst);
 		pm_runtime_put(dev);
 		pm_runtime_disable(dev);
 	}
@@ -549,11 +549,11 @@ void rcar_gen4_pcie_unprepare(struct rcar_gen4_pcie *rcar)
 int rcar_gen4_pcie_devm_reset_get(struct rcar_gen4_pcie *rcar,
 				  struct device *dev)
 {
-	rcar->rst = devm_reset_control_get(dev, NULL);
-	if (IS_ERR(rcar->rst)) {
-		dev_err(dev, "Failed to get Cold-reset\n");
-		return PTR_ERR(rcar->rst);
-	}
+	// rcar->rst = devm_reset_control_get(dev, NULL);
+	// if (IS_ERR(rcar->rst)) {
+	// 	dev_err(dev, "Failed to get Cold-reset\n");
+	// 	return PTR_ERR(rcar->rst);
+	// }
 
 	return 0;
 }
-- 
2.34.1

